/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, useTexture } from "@react-three/drei";
import { RigidBody } from "@react-three/rapier";

export function MainScene(props) {
  const model = useGLTF("/model/portfolio.glb");
  const nodes = model.nodes;

  const rocksTexture = useTexture('./textures/rocks.jpg')
  const landscapesTexture = useTexture('./textures/landscapes.jpg')
  const furnituresTexture = useTexture('./textures/furnitures.jpg')
  const electronicsTexture = useTexture('./textures/electronics.jpg')
  const settingsTexture = useTexture('./textures/settings.jpg')
  const resumeTexture = useTexture('./textures/resume.jpg')

  rocksTexture.flipY = false;
  landscapesTexture.flipY = false;
  furnituresTexture.flipY = false;
  electronicsTexture.flipY = false;
  settingsTexture.flipY = false;
  resumeTexture.flipY = false;

  return (
    <group {...props} dispose={null}>
      <RigidBody colliders='cuboid' type="fixed">
        <mesh
          geometry={nodes.portal_light.geometry}
          position={nodes.portal_light.position}
          rotation={nodes.portal_light.rotation}
        >
          <meshBasicMaterial color="#ffffe5" />
        </mesh>
      </RigidBody>

      <mesh
        geometry={nodes.macbook_screen.geometry}
        position={nodes.macbook_screen.position}
        rotation={nodes.macbook_screen.rotation}
      >
        <meshBasicMaterial color="#ffffe5" />
      </mesh>

      <RigidBody colliders='trimesh' type="fixed">
        <mesh
          geometry={nodes.rocks.geometry}
          position={nodes.rocks.position}
          rotation={nodes.rocks.rotation}
        >
          <meshBasicMaterial map={rocksTexture} />
        </mesh>
        <mesh
          geometry={nodes.landscapes.geometry}
          position={nodes.landscapes.position}
          rotation={nodes.landscapes.rotation}
        >
          <meshBasicMaterial map={landscapesTexture} />
        </mesh>

        <mesh
          geometry={nodes.furnitures.geometry}
          position={nodes.furnitures.position}
          rotation={nodes.furnitures.rotation}
        >
          <meshBasicMaterial map={furnituresTexture} />
        </mesh>

        <mesh
          geometry={nodes.settings.geometry}
          position={nodes.settings.position}
          rotation={nodes.settings.rotation}
        >
          <meshBasicMaterial map={settingsTexture} />
        </mesh>
      </RigidBody>


      <mesh
        geometry={nodes.electronics.geometry}
        position={nodes.electronics.position}
        rotation={nodes.electronics.rotation}
      >
        <meshBasicMaterial map={electronicsTexture} />
      </mesh>
      <mesh
        geometry={nodes.m_chair.geometry}
        position={nodes.m_chair.position}
        rotation={nodes.m_chair.rotation}
      >
        <meshBasicMaterial map={furnituresTexture} />
      </mesh>

      <RigidBody colliders='cuboid' type="fixed">
        <mesh
          geometry={nodes.m_project_diglette.geometry}
          position={nodes.m_project_diglette.position}
          rotation={nodes.m_project_diglette.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />
        </mesh>
        <mesh
          geometry={nodes.m_skill_diglette.geometry}
          position={nodes.m_skill_diglette.position}
          rotation={nodes.m_skill_diglette.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />
        </mesh>
        <mesh
          geometry={nodes.m_work_diglette.geometry}
          position={nodes.m_work_diglette.position}
          rotation={nodes.m_work_diglette.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />
        </mesh>
        <mesh
          geometry={nodes.m_education_diglette.geometry}
          position={nodes.m_education_diglette.position}
          rotation={nodes.m_education_diglette.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />
        </mesh>
      </RigidBody>

    </group>
  );
}

useGLTF.preload("/model/portfolio.glb");