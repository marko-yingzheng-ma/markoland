/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, useTexture } from "@react-three/drei";
import { useThree } from "@react-three/fiber";
import { CuboidCollider, RigidBody } from "@react-three/rapier";
import { useEffect, useRef } from "react";
import { useGameStore } from "../stores/useGameStore";
import { useControls } from "leva";


export function MainScene({
  isActive,
  ...rest
}) {
  const model = useGLTF("/model/portfolio.glb");
  const nodes = model.nodes;

  const rocksTexture = useTexture('./textures/rocks.jpg')
  const landscapesTexture = useTexture('./textures/landscapes.jpg')
  const furnituresTexture = useTexture('./textures/furnitures.jpg')
  const electronicsTexture = useTexture('./textures/electronics.jpg')
  const settingsTexture = useTexture('./textures/settings.jpg')
  const resumeTexture = useTexture('./textures/resume.jpg')

  rocksTexture.flipY = false;
  landscapesTexture.flipY = false;
  furnituresTexture.flipY = false;
  electronicsTexture.flipY = false;
  settingsTexture.flipY = false;
  resumeTexture.flipY = false;

  const { controls, camera } = useThree()
  const updateHomeBase = useGameStore((state) => state.updateHomeBase)
  updateHomeBase(nodes.m_chair.position);

  const chairRef = useRef()

  useEffect(() => {
    if (controls && camera) {
      camera.position.set(nodes.m_chair.position.x - 12.0, nodes.m_chair.position.y + 6.0, nodes.m_chair.position.z - 12.0)
      controls.target.set(nodes.m_chair.position.x + 15.0, nodes.m_chair.position.y, nodes.m_chair.position.z + 10.0)
    }
  }, [controls, camera])

  useEffect(() => {
    if (isActive) {

    }
  }, [isActive])

  return (
    <group {...rest} dispose={null}>
      <RigidBody colliders='trimesh' type="fixed">
        <mesh
          name="rocks"
          geometry={nodes.rocks.geometry}
          position={nodes.rocks.position}
          rotation={nodes.rocks.rotation}
        >
          <meshBasicMaterial map={rocksTexture} />
        </mesh>
        <mesh
          name="landscapes"
          geometry={nodes.landscapes.geometry}
          position={nodes.landscapes.position}
          rotation={nodes.landscapes.rotation}
        >
          <meshBasicMaterial map={landscapesTexture} />
        </mesh>

        <mesh
          geometry={nodes.furnitures.geometry}
          position={nodes.furnitures.position}
          rotation={nodes.furnitures.rotation}
        >
          <meshBasicMaterial map={furnituresTexture} />
        </mesh>

        <mesh
          name="settings"
          geometry={nodes.settings.geometry}
          position={nodes.settings.position}
          rotation={nodes.settings.rotation}
        >
          <meshBasicMaterial map={settingsTexture} />
        </mesh>
      </RigidBody>

      <RigidBody colliders='cuboid' type="fixed">
        <mesh
          name="m_project_diglette"
          geometry={nodes.m_project_diglette.geometry}
          position={nodes.m_project_diglette.position}
          rotation={nodes.m_project_diglette.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />
        </mesh>
        <mesh
          name="m_skill_diglette"
          geometry={nodes.m_skill_diglette.geometry}
          position={nodes.m_skill_diglette.position}
          rotation={nodes.m_skill_diglette.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />
        </mesh>
        <mesh
          name="m_work_diglette"
          geometry={nodes.m_work_diglette.geometry}
          position={nodes.m_work_diglette.position}
          rotation={nodes.m_work_diglette.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />
        </mesh>
        <mesh
          name="m_education_diglette"
          geometry={nodes.m_education_diglette.geometry}
          position={nodes.m_education_diglette.position}
          rotation={nodes.m_education_diglette.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />
        </mesh>
      </RigidBody>

      <RigidBody colliders='cuboid' type="fixed">
        <mesh
          name="portal_light"
          geometry={nodes.portal_light.geometry}
          position={nodes.portal_light.position}
          rotation={nodes.portal_light.rotation}
        >
          <meshBasicMaterial color="#ffffe5" />
        </mesh>
      </RigidBody>

      <mesh
        name="macbook_screen"
        geometry={nodes.macbook_screen.geometry}
        position={nodes.macbook_screen.position}
        rotation={nodes.macbook_screen.rotation}
      >
        <meshBasicMaterial color="#ffffe5" />
      </mesh>

      <mesh
        name="electronics"
        geometry={nodes.electronics.geometry}
        position={nodes.electronics.position}
        rotation={nodes.electronics.rotation}
      >
        <meshBasicMaterial map={electronicsTexture} />
      </mesh>

      <RigidBody
        ref={chairRef}
        type="fixed"
      >
        <mesh
          name="m_chair"
          geometry={nodes.m_chair.geometry}
          position={nodes.m_chair.position}
          rotation={nodes.m_chair.rotation}
        >
          <meshBasicMaterial map={furnituresTexture} />
        </mesh>
        {
          isActive &&
          <CuboidCollider
            args={[0.4, 0.35, 0.8]}
            position={[
              nodes.m_chair.position.x,
              nodes.m_chair.position.y + 0.18,
              nodes.m_chair.position.z
            ]}
          />
        }
      </RigidBody>

      <RigidBody type="fixed">
        <mesh
          name="m_desk"
          geometry={nodes.m_desk.geometry}
          position={nodes.m_desk.position}
          rotation={nodes.m_desk.rotation}
        >
          <meshBasicMaterial map={furnituresTexture} />
        </mesh>
        {
          isActive &&
          <CuboidCollider
            args={[0.7, 0.38, 1.0]}
            position={[nodes.m_desk.position.x + 0.35, nodes.m_desk.position.y + 0.2, nodes.m_desk.position.z - 0.9]}
          />
        }
      </RigidBody>


    </group>
  );
}

useGLTF.preload("/model/portfolio.glb");