/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useThree } from "@react-three/fiber";
import { useGameStore } from '../stores/useGameStore';
import { RigidBody } from "@react-three/rapier";

export function Avatar(props) {
  const { scene, animations } = useGLTF("/model/avatar.glb");
  const { actions, names } = useAnimations(animations, scene)
  const [animationIndex, setAnimaitonIndex] = useState(1)
  const { controls, camera } = useThree()

  useEffect(() => {
    actions[names[animationIndex]].reset().fadeIn(0.5).play()

    const unsubscribeUpdateHomeBase = useGameStore.subscribe(
      (state) => state.homebase,
      (homebase) => {
        scene.position.set(homebase.x + 0.6, homebase.y - 0.18, homebase.z - 0.05)
        scene.rotation.y = Math.PI / 2.0;
      },
      {
        equalityFn: (a, b) => a === b,
        fireImmediately: true
      }
    )

    return () => {
      actions[names[animationIndex]].fadeOut(0.5)
      unsubscribeUpdateHomeBase()
    }
  }, [animationIndex, actions, names, scene])

  return (
    <RigidBody>
      <primitive {...props} object={scene} />
    </RigidBody>
  );
}

useGLTF.preload("/model/avatar.glb");
