/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, useTexture } from "@react-three/drei";
import { CuboidCollider, RigidBody } from "@react-three/rapier";
import { useEffect, useRef } from "react";
import gsap from 'gsap';
import { Annotation } from "../Annotation";
import { models, textures } from '@/assets/index.js';
import { useGameStore } from "@/stores/useGameStore";
import { ResumeSectionNames } from '../../utils/constants';

export function MainScene({
  onDigletteClicked,
  ...rest
}) {
  const model = useGLTF(models.portfolio);
  const nodes = model.nodes;


  const rocksTexture = useTexture(textures.rocksTexture)
  const landscapesTexture = useTexture(textures.landscapesTexture)
  const furnituresTexture = useTexture(textures.furnituresTexture)
  const electronicsTexture = useTexture(textures.electronicsTexture)
  const settingsTexture = useTexture(textures.settingsTexture)
  const resumeTexture = useTexture(textures.resumeTexture)

  rocksTexture.flipY = false;
  landscapesTexture.flipY = false;
  furnituresTexture.flipY = false;
  electronicsTexture.flipY = false;
  settingsTexture.flipY = false;
  resumeTexture.flipY = false;

  const chairRef = useRef()
  const isActive = useGameStore((state) => state.isActive)
  const isInteractionReady = useGameStore((state) => state.isInteractionReady)

  useEffect(() => {
    if (isActive) {
      gsap.to(chairRef.current.position, {
        duration: 0.2,
        // ease: "expo.out",
        x: "-=0.8"
      })
    }
  }, [isActive])

  return (
    <group {...rest} dispose={null}>
      <mesh
        name="settings"
        geometry={nodes.settings.geometry}
        position={nodes.settings.position}
        rotation={nodes.settings.rotation}
      >
        <meshBasicMaterial map={settingsTexture} />
      </mesh>

      <mesh
        name="bricks"
        geometry={nodes.bricks.geometry}
        position={nodes.bricks.position}
        rotation={nodes.bricks.rotation}
      >
        <meshBasicMaterial map={rocksTexture} />
      </mesh>

      <RigidBody
        colliders='trimesh'
        type="fixed"
      >
        <mesh
          name="rocks"
          geometry={nodes.rocks.geometry}
          position={nodes.rocks.position}
          rotation={nodes.rocks.rotation}
        >
          <meshBasicMaterial map={rocksTexture} />
        </mesh>
        <mesh
          name="landscapes"
          geometry={nodes.landscapes.geometry}
          position={nodes.landscapes.position}
          rotation={nodes.landscapes.rotation}
        >
          <meshBasicMaterial map={landscapesTexture} />
        </mesh>

        <mesh
          geometry={nodes.furnitures.geometry}
          position={nodes.furnitures.position}
          rotation={nodes.furnitures.rotation}
        >
          <meshBasicMaterial map={furnituresTexture} />
        </mesh>
      </RigidBody>

      <RigidBody colliders='trimesh' type="fixed">
        <mesh
          name={ResumeSectionNames.SKILLS}
          geometry={nodes.diglette1.geometry}
          position={nodes.diglette1.position}
          rotation={nodes.diglette1.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />

          {isInteractionReady &&
            <Annotation
              title={ResumeSectionNames.SKILLS}
              onClick={onDigletteClicked}
              position={[0, 2, 0]}
              rotation={[0, Math.PI, 0]}
            />
          }

        </mesh>
        <mesh
          name={ResumeSectionNames.ABOUT}
          geometry={nodes.diglette2.geometry}
          position={nodes.diglette2.position}
          rotation={nodes.diglette2.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />

          {isInteractionReady &&
            <Annotation
              title={ResumeSectionNames.ABOUT}
              onClick={onDigletteClicked}
              position={[0, 2, 0]}
              rotation={[0, Math.PI, 0]}
            />
          }


        </mesh>
        <mesh
          name={ResumeSectionNames.WORK}
          geometry={nodes.diglette3.geometry}
          position={nodes.diglette3.position}
          rotation={nodes.diglette3.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />

          {isInteractionReady &&
            <Annotation
              title={ResumeSectionNames.WORK}
              onClick={onDigletteClicked}
              position={[0, 2, 0]}
              rotation={[0, Math.PI, 0]}
            />
          }


        </mesh>
        <mesh
          name={ResumeSectionNames.EDUCATION}
          geometry={nodes.diglette4.geometry}
          position={nodes.diglette4.position}
          rotation={nodes.diglette4.rotation}
        >
          <meshBasicMaterial map={resumeTexture} />

          {isInteractionReady &&
            <Annotation
              title={ResumeSectionNames.EDUCATION}
              onClick={onDigletteClicked}
              position={[0, 2, 0]}
              rotation={[0, Math.PI, 0]}
            />
          }

        </mesh>
      </RigidBody>

      <RigidBody colliders='cuboid' type="fixed">
        <mesh
          name="portal_light"
          geometry={nodes.portal_light.geometry}
          position={nodes.portal_light.position}
          rotation={nodes.portal_light.rotation}
        >
          <meshBasicMaterial color="#ffffe5" />
        </mesh>
      </RigidBody>

      <mesh
        name="macbook_screen"
        geometry={nodes.macbook_screen.geometry}
        position={nodes.macbook_screen.position}
        rotation={nodes.macbook_screen.rotation}
      >
        <meshBasicMaterial color="#ffffe5" />
      </mesh>

      <mesh
        name="electronics"
        geometry={nodes.electronics.geometry}
        position={nodes.electronics.position}
        rotation={nodes.electronics.rotation}
      >
        <meshBasicMaterial map={electronicsTexture} />
      </mesh>

      <RigidBody type="fixed" >
        <mesh
          ref={chairRef}
          name="m_chair"
          geometry={nodes.m_chair.geometry}
          position={nodes.m_chair.position}
          rotation={nodes.m_chair.rotation}
        >
          <meshBasicMaterial map={furnituresTexture} />
        </mesh>
        {
          isInteractionReady &&
          <CuboidCollider
            args={[0.3, 0.3, 0.8]}
            position={[
              chairRef.current.position.x,
              chairRef.current.position.y + 0.18,
              chairRef.current.position.z
            ]}
          />
        }
      </RigidBody>

      <RigidBody type="fixed" >
        <mesh
          name="m_desk"
          geometry={nodes.m_desk.geometry}
          position={nodes.m_desk.position}
          rotation={nodes.m_desk.rotation}
        >
          <meshBasicMaterial map={furnituresTexture} />
        </mesh>
        {
          isInteractionReady &&
          <CuboidCollider
            args={[0.6, 0.3, 1.0]}
            position={[nodes.m_desk.position.x + 0.35, nodes.m_desk.position.y + 0.2, nodes.m_desk.position.z - 0.9]}
          />
        }
      </RigidBody>


    </group>
  );
}

useGLTF.preload(models.portfolio);